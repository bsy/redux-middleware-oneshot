{
  "name": "redux-middleware-oneshot",
  "version": "0.0.1",
  "description": "Create a middleware",
  "main": "lib/index.js",
  "scripts": {
    "test": "make test",
    "prepublish": "make build lint"
  },
  "repository": {
    "type": "git",
    "url": "git+https://github.com/michaelcontento/redux-middleware-oneshot.git"
  },
  "homepage": "https://github.com/michaelcontento/redux-middleware-oneshot",
  "keywords": [
    "redux",
    "redux-middleware",
    "middleware"
  ],
  "author": {
    "name": "Michael Contento",
    "email": "michaelcontento@gmail.com"
  },
  "license": "MIT",
  "devDependencies": {
    "babel": "^5.8.21",
    "babel-core": "^5.8.22",
    "babel-eslint": "^4.0.5",
    "eslint": "^1.1.0",
    "eslint-config-airbnb": "0.0.7"
  },
  "dependencies": {
    "redux-actions": "0.7.x"
  },
  "peerDependencies": {
    "redux": "^1.0.0 || 1.0.0-alpha || 1.0.0-rc"
  },
  "readme": "[redux-storage][]\n=================\n\n[![license](https://img.shields.io/npm/l/redux-storage.svg?style=flat-square)](https://www.npmjs.com/package/redux-storage)\n[![npm version](https://img.shields.io/npm/v/redux-storage.svg?style=flat-square)](https://www.npmjs.com/package/redux-storage)\n[![npm downloads](https://img.shields.io/npm/dm/redux-storage.svg?style=flat-square)](https://www.npmjs.com/package/redux-storage)\n[![Code Climate](https://codeclimate.com/github/michaelcontento/redux-storage/badges/gpa.svg)](https://codeclimate.com/github/michaelcontento/redux-storage)\n\nSave and load the [Redux][] state with ease.\n\n## Features\n\n* Flexible storage engines\n    * [localStorage][] based on `window.localStorage`\n    * [reactNativeAsyncStorage][] based on `react-native/AsyncStorage`\n* Storage engines can be async\n* Load and save actions that can be observed\n    * [SAVE][]: `{ type: 'REDUX_STORAGE_SAVE', payload: /* state tree */ }`\n    * [LOAD][]: `{ type: 'REDUX_STORAGE_LOAD', payload: /* state tree */ }`\n* Various engine decorators\n    * [debounce][]: batch multiple save operations\n    * [filter][]: only store a subset of the whole state tree\n    * [immutablejs][]: load parts of the state tree as [Immutable][] objects\n* Blacklist actions from issuing a save operation\n\n## Installation\n\n    npm install --save redux-storage\n\n## Usage\n\n```js\n// Import redux and all your reducers as usual\nimport { createStore, applyMiddleware, combineReducers } from 'redux';\nimport * as reducers from './reducers';\n\n// We need to wrap the base reducer, as this is the place where the loaded\n// state will be injected.\n//\n// Note: The reducer does nothing special! It just listens for the LOAD\n//       action and merge in the provided state :)\nconst reducer = storage.reducer(combineReducers(reducers));\n\n// Now it's time to decide which storage engine should be used\n//\n// Note: The arguments to `createEngine` are different for every engine!\nimport createEngine from 'redux-storage/engines/reactNativeAsyncStorage';\nconst engine = createEngine('my-save-key');\n\n// And with the engine we can create our middleware function. The middleware\n// is responsible for calling `engine.save` with the current state afer\n// every dispatched action.\n//\n// Note: You can provide a list of action types as second argument, those\n//       actions will be filtered and WON'T trigger calls to `engine.save`!\nconst middleware = storage.createMiddleware(engine);\n\n// As everything is prepared, we can go ahead and combine all parts as usual\nconst createStoreWithMiddleware = applyMiddleware(middleware)(createStore);\nconst store = createStoreWithMiddleware(reducer);\n\n// At this stage the whole system is in place and every action will trigger\n// a save operation.\n//\n// BUT (!) a existing old state HAS NOT been restored yet! It's up to you to\n// decide when this should happen. Most of the times you can/should do this\n// right after the store object has been created.\n\n// To load the previous state we create a loader function with our prepared\n// engine. The result is a function that can be used on any store object you\n// have at hand :)\nconst load = storage.createLoader(engine);\nload(store);\n```\n\n## Details\n\n### Engines\n\n#### reactNativeAsyncStorage\n\nThis will use `AsyncStorage` out of [react-native][].\n\n```js\nimport createEngine from 'redux-storage/engines/reactNativeAsyncStorage';\nconst engine = createEngine('my-save-key');\n```\n\n**Warning**: [react-native][] is *not* a dependency of [redux-storage][]! You\nhave to install it separately.\n\n#### localStorage\n\nStores everything inside `window.localStorage`.\n\n```js\nimport createEngine from 'redux-storage/engines/localStorage';\nconst engine = createEngine('my-save-key');\n```\n\n**Warning**: `localStorage` does not expose a async API and every save/load\noperation will block the JS thread!\n\n### Actions\n\n[redux-storage][] will trigger actions after every load or save operation from\nthe underlying engine.\n\nYou can use this, for example, to display a loading screen until the old state\nhas been restored like this:\n\n```js\nimport { LOAD, SAVE } from 'redux-storage';\n\nfunction storeageAwareReducer(state = { loaded: false }, action) {\n    switch (action.type) {\n        case LOAD:\n            return { ...state, loaded: true };\n\n        case SAVE:\n            console.log('Something has changed and written to disk!');\n\n        default:\n            return state;\n    }\n}\n```\n\n### Middleware\n\nIf you pass an array of action types as second argument to `createMiddleware`,\nthose will be added to a internal blacklist and won't trigger calls to\n`engine.save`.\n\n```js\nimport storage from 'redux-storage'\n\nimport { APP_START } from './constants';\n\nconst middleware = storage.createMiddleware(engine, [ APP_START ]);\n```\n\n### Decorators\n\nDecorators simply wrap your engine instance and modify/enhance it's behaviour.\n\n#### Filter\n\nUse this decorator to write only part of your state tree to disk.\n\n```js\nimport storage from 'redux-storage'\n\nengine = storage.decorators.filter(engine, [\n    ['some', 'key'],\n    ['another', 'very', 'nested', 'key']\n]);\n```\n\n#### Debounce\n\nThis decorator will delay the expensive save operation for the given ms. Every\nnew change to the state tree will reset the timeout!\n\n```js\nimport storage from 'redux-storage'\n\nengine = storage.decorators.debounce(engine, 1500);\n```\n\n#### Immutablejs\n\nConvert parts of the state tree into [Immutable][] objects on `engine.load`.\n\n```js\nimport storage from 'redux-storage'\n\nengine = storage.decorators.immutablejs(engine, [\n    ['immutablejs-reducer'],\n    ['plain-object-reducer', 'with-immutablejs-key']\n]);\n```\n\n## Todo\n\n- Write tests for everything!\n\n  [Redux]: https://github.com/gaearon/redux\n  [Immutable]: https://github.com/facebook/immutable-js\n  [redux-storage]: https://github.com/michaelcontento/redux-storage\n  [react-native]: https://facebook.github.io/react-native/\n  [localStorage]: https://github.com/michaelcontento/redux-storage/blob/master/src/engines/localStorage.js\n  [reactNativeAsyncStorage]: https://github.com/michaelcontento/redux-storage/blob/master/src/engines/reactNativeAsyncStorage.js\n  [LOAD]: https://github.com/michaelcontento/redux-storage/blob/master/src/constants.js#L1\n  [SAVE]: https://github.com/michaelcontento/redux-storage/blob/master/src/constants.js#L2\n  [debounce]: https://github.com/michaelcontento/redux-storage/blob/master/src/decorators/debounce.js\n  [filter]: https://github.com/michaelcontento/redux-storage/blob/master/src/decorators/filter.js\n  [immutablejs]: https://github.com/michaelcontento/redux-storage/blob/master/src/decorators/immutablejs.js\n",
  "readmeFilename": "README.md",
  "gitHead": "351a6972de95ef2477e7cd9e9e929ff8b55f602c",
  "bugs": {
    "url": "https://github.com/michaelcontento/redux-storage/issues"
  },
  "_id": "redux-storage@1.1.2",
  "_shasum": "c392a23d512b39d6123fca6afece976552b80721",
  "_from": "redux-storage@>=1.1.2 <2.0.0"
}
